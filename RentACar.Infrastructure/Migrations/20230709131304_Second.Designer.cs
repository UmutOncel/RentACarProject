// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.Infrastructure.Data;

#nullable disable

namespace RentACar.Infrastructure.Migrations
{
    [DbContext(typeof(RentACarDBContext))]
    [Migration("20230709131304_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RentACar.Domain.Entities.Car", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarID"), 1L, 1);

                    b.Property<int>("CarModel")
                        .HasColumnType("int");

                    b.Property<int?>("CarParkID")
                        .HasColumnType("int");

                    b.HasKey("CarID");

                    b.HasIndex("CarParkID")
                        .IsUnique()
                        .HasFilter("[CarParkID] IS NOT NULL");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.CarCustomer", b =>
                {
                    b.Property<int>("CarCustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarCustomerID"), 1L, 1);

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PickUpDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CarCustomerID");

                    b.HasIndex("CarID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CarCustomers");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.CarPark", b =>
                {
                    b.Property<int>("CarParkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarParkID"), 1L, 1);

                    b.Property<int?>("CarParkFloorID")
                        .HasColumnType("int");

                    b.Property<int>("CarParkNo")
                        .HasColumnType("int");

                    b.HasKey("CarParkID");

                    b.HasIndex("CarParkFloorID");

                    b.ToTable("CarParks");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.CarParkFloor", b =>
                {
                    b.Property<int>("CarParkFloorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarParkFloorID"), 1L, 1);

                    b.Property<int>("CarParkFloorNo")
                        .HasColumnType("int");

                    b.HasKey("CarParkFloorID");

                    b.ToTable("CarParkFloors");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"), 1L, 1);

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerLastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.Car", b =>
                {
                    b.HasOne("RentACar.Domain.Entities.CarPark", "CarPark")
                        .WithOne("Car")
                        .HasForeignKey("RentACar.Domain.Entities.Car", "CarParkID");

                    b.Navigation("CarPark");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.CarCustomer", b =>
                {
                    b.HasOne("RentACar.Domain.Entities.Car", "Car")
                        .WithMany("CarCustomers")
                        .HasForeignKey("CarID");

                    b.HasOne("RentACar.Domain.Entities.Customer", "Customer")
                        .WithMany("CarCustomers")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.CarPark", b =>
                {
                    b.HasOne("RentACar.Domain.Entities.CarParkFloor", "CarParkFloor")
                        .WithMany("CarParks")
                        .HasForeignKey("CarParkFloorID");

                    b.Navigation("CarParkFloor");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.Car", b =>
                {
                    b.Navigation("CarCustomers");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.CarPark", b =>
                {
                    b.Navigation("Car");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.CarParkFloor", b =>
                {
                    b.Navigation("CarParks");
                });

            modelBuilder.Entity("RentACar.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CarCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
